package com.elasticsearch.plugin.tokenizer;

import java.io.IOException;
import java.io.Reader;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.lucene.analysis.Tokenizer;
import org.apache.lucene.analysis.tokenattributes.CharTermAttribute;
import org.apache.lucene.analysis.tokenattributes.OffsetAttribute;

public final class PatternKeyTokenizer extends Tokenizer {


	private final CharTermAttribute termAtt = (CharTermAttribute)addAttribute(CharTermAttribute.class);
	private final OffsetAttribute offsetAtt = (OffsetAttribute)addAttribute(OffsetAttribute.class);

	private final StringBuilder str = new StringBuilder();

	private int index;
	private final int group;
	private final Matcher matcher;

	public PatternKeyTokenizer(Reader reader, Pattern pattern, int group) {
		super(reader);
		this.group = group;
		
		this.matcher = pattern.matcher("");
	    

	    if ((group >= 0) && (group > this.matcher.groupCount())) {
	      throw new IllegalArgumentException("invalid group specified: pattern only has: " + this.matcher.groupCount() + " capturing groups");
	    }

	}

	@Override
	public boolean incrementToken() throws IOException {
		return false;
	}

}
